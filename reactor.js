// Generated by CoffeeScript 1.3.3
var Observer, Signal, a, b, c, d, dependencyStack, e, f;

dependencyStack = [];

Signal = function(definition) {
  var createdSignal, evaluate, value;
  value = null;
  evaluate = function(observerList) {
    var dependency, dependentEvaluate, dependentIndex, observerTrigger, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    value = definition;
    if (typeof definition === "function") {
      _ref = evaluate.dependencies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependency = _ref[_i];
        dependentIndex = dependency.dependents.indexOf(evaluate);
        dependency.dependents.splice(dependentIndex, 1);
      }
      evaluate.dependencies = [];
      dependencyStack.push(evaluate);
      value = definition();
      dependencyStack.pop();
    }
    _ref1 = createdSignal.observers.slice(0);
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      observerTrigger = _ref1[_j];
      if ((observerList.indexOf(observerTrigger)) < 0) {
        observerList.push(observerTrigger);
      }
    }
    _ref2 = createdSignal.dependents.slice(0);
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      dependentEvaluate = _ref2[_k];
      _results.push(dependentEvaluate(observerList));
    }
    return _results;
  };
  evaluate.dependencies = [];
  evaluate.dependencyType = "signal";
  createdSignal = function(newDefinition) {
    var dependent, existingDependencyIndex, existingDependentIndex, existingObserveeIndex, existingObserverIndex, methodName, observerList, observerTrigger, _i, _j, _len, _len1, _ref;
    if (newDefinition != null) {
      definition = newDefinition;
      if (definition instanceof Array) {
        _ref = ["pop", "push", "reverse", "shift", "sort", "splice", "unshift"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          methodName = _ref[_i];
          createdSignal[methodName] = function() {
            definition[methodName].apply(definition, arguments);
            return createdSignal(definition);
          };
        }
      }
      if (definition instanceof Object) {
        createdSignal.set = function(key, value) {
          definition[key] = value;
          return createdSignal(definition);
        };
      }
      observerList = [];
      evaluate(observerList);
      for (_j = 0, _len1 = observerList.length; _j < _len1; _j++) {
        observerTrigger = observerList[_j];
        observerTrigger();
      }
      return value;
    } else {
      dependent = dependencyStack[dependencyStack.length - 1];
      if ((dependent != null) && dependent.dependencyType === "signal") {
        existingDependentIndex = createdSignal.dependents.indexOf(dependent);
        if (existingDependentIndex < 0) {
          createdSignal.dependents.push(dependent);
        }
        existingDependencyIndex = dependent.dependencies.indexOf(createdSignal);
        if (existingDependencyIndex < 0) {
          dependent.dependencies.push(createdSignal);
        }
      } else if ((dependent != null) && dependent.dependencyType === "observer") {
        existingObserverIndex = createdSignal.observers.indexOf(dependent);
        if (existingObserverIndex < 0) {
          createdSignal.observers.push(dependent);
        }
        existingObserveeIndex = dependent.observees.indexOf(createdSignal);
        if (existingObserveeIndex < 0) {
          dependent.observees.push(createdSignal);
        }
      }
      return value;
    }
  };
  createdSignal.dependents = [];
  createdSignal.observers = [];
  evaluate();
  return createdSignal;
};

Observer = function(response) {
  var createdObserver, trigger;
  trigger = function() {
    var observee, observerIndex, _i, _len, _ref;
    _ref = trigger.observees;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      observee = _ref[_i];
      observerIndex = observee.observers.indexOf(trigger);
      observee.observers.splice(observerIndex, 1);
    }
    trigger.observees = [];
    dependencyStack.push(trigger);
    response();
    return dependencyStack.pop();
  };
  trigger.observees = [];
  trigger.dependencyType = "observer";
  createdObserver = function(newResponse) {
    response = newResponse;
    trigger();
    return null;
  };
  trigger();
  return createdObserver;
};

console.log("----------------------------------------------------------------");

console.log("Begin Testing on " + new Date());

console.log("----------------------------------------------------------------");

console.log("Single static signal");

a = Signal(1);

console.log(a() === 1);

console.log(a(2) === 2);

console.log(a() === 2);

console.log(a(3) === 3);

console.log(a() === 3);

console.log("Second static signal ");

a = Signal(1);

b = Signal(2);

console.log(a() === 1);

console.log(b() === 2);

console.log(a() === 1);

console.log(b(3) === 3);

console.log(a() === 1);

console.log(b() === 3);

console.log(a() === 1);

console.log(b(4) === 4);

console.log(a() === 1);

console.log(b() === 4);

console.log("Signal with simple single dependency");

a = Signal(1);

b = Signal(function() {
  return a();
});

console.log(a() === 1);

console.log(b() === 1);

a(2);

console.log(a() === 2);

console.log(b() === 2);

c = Signal(3);

console.log(a() === 2);

console.log(b() === 2);

console.log("multi dependents");

a = Signal(1);

b = Signal(function() {
  return a();
});

c = Signal(function() {
  return a() + 1;
});

console.log(a() === 1);

console.log(b() === 1);

console.log(c() === 2);

a(2);

console.log(a() === 2);

console.log(b() === 2);

console.log(c() === 3);

console.log("Breaking dependency");

a = Signal(1);

b = Signal(function() {
  return a();
});

console.log(a() === 1);

console.log(b() === 1);

a(2);

console.log(a() === 2);

console.log(b() === 2);

b(3);

console.log(a() === 2);

console.log(b() === 3);

a(7);

console.log(a() === 7);

console.log(b() === 3);

console.log("Signal with modified single dependency");

a = Signal(1);

b = Signal(function() {
  return a() + 10;
});

console.log(a() === 1);

console.log(b() === 11);

a(2);

console.log(a() === 2);

console.log(b() === 12);

console.log("Signal with simple chain dependency");

a = Signal(1);

b = Signal(function() {
  return a();
});

c = Signal(function() {
  return b();
});

console.log(a() === 1);

console.log(b() === 1);

console.log(c() === 1);

a(2);

console.log(a() === 2);

console.log(b() === 2);

console.log(c() === 2);

console.log("Signal with complex chain dependency");

a = Signal(1);

b = Signal(function() {
  return a() + 1;
});

c = Signal(function() {
  return b() + 1;
});

console.log(a() === 1);

console.log(b() === 2);

console.log(c() === 3);

a(4);

console.log(a() === 4);

console.log(b() === 5);

console.log(c() === 6);

console.log("Signal with multiple dependency");

a = Signal(1);

b = Signal(2);

c = Signal(function() {
  return a() + b();
});

console.log(a() === 1);

console.log(b() === 2);

console.log(c() === 3);

a(3);

console.log(a() === 3);

console.log(b() === 2);

console.log(c() === 5);

b(4);

console.log(a() === 3);

console.log(b() === 4);

console.log(c() === 7);

console.log("Multipath dependencies");

a = Signal(1);

b = Signal(function() {
  return a() + 1;
});

c = Signal(function() {
  return a() + b();
});

console.log(a() === 1);

console.log(b() === 2);

console.log(c() === 3);

a(7);

console.log(a() === 7);

console.log(b() === 8);

console.log(c() === 15);

b(3);

console.log(a() === 7);

console.log(b() === 3);

console.log(c() === 10);

a(4);

console.log(a() === 4);

console.log(b() === 3);

console.log(c() === 7);

console.log("basic observer");

a = Signal(1);

console.log(a() === 1);

b = null;

console.log(b === null);

c = Observer(function() {
  return b = a();
});

console.log(b === 1);

a(2);

console.log(b === 2);

console.log("multi observer");

a = Signal(1);

b = Signal(function() {
  return a();
});

c = Signal(function() {
  return a();
});

d = Signal(function() {
  return c();
});

e = 0;

f = Observer(function() {
  return e += a() + b() + c() + d();
});

console.log(e === 4);

a(2);

console.log(e === 12);

console.log("read write observer");

a = Signal(1);

b = Signal(2);

console.log(a() === 1);

console.log(b() === 2);

c = Observer(function() {
  return b(a());
});

console.log(b() === 1);

a(3);

console.log(a() === 3);

console.log(b() === 3);

b(4);

console.log(a() === 3);

console.log(b() === 4);

console.log("another read write observer");

a = 0;

b = Signal(1);

c = Signal(2);

console.log(a === 0);

console.log(b() === 1);

console.log(c() === 2);

d = Observer(function() {
  a += 1;
  b();
  return c(3);
});

console.log(a === 1);

console.log(b() === 1);

console.log(c() === 3);

a = 4;

console.log(a === 4);

console.log(b() === 1);

console.log(c() === 3);

b(6);

console.log(a === 5);

console.log(b() === 6);

console.log(c() === 3);

c(7);

console.log(a === 5);

console.log(b() === 6);

console.log(c() === 7);

console.log("object setter and getter");

a = Signal({});

b = Signal(function() {
  return "Serialized: " + JSON.stringify(a());
});

console.log(b() === "");

console.log("----------------------------------------------------------------");

console.log("Completed Testing on " + new Date());

console.log("----------------------------------------------------------------");
